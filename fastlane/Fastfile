update_fastlane
fastlane_version "1.39.0"
default_platform :ios

##################################################################################################################
# Configuration
##################################################################################################################
ENV["JM_WORKSPACEPATH"] = "./TheGauntlet/TheGauntlet.xcworkspace"
ENV["JM_PROJECTPATH"] = "./TheGauntlet/TheGauntlet.xcodeproj"
ENV["JM_MAINSCHEME"] = "TheGauntlet"
ENV["JM_CRASHLYTICS_PATH"] = "./TheGauntlet/Pods/Crashlytics/Crashlytics.framework"

ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"

##################################################################################################################
# Functions
##################################################################################################################
def unit_test
  scan(
    workspace: ENV["JM_WORKSPACEPATH"],
    scheme: "TheGauntlet", # avoir differents scheme
    clean: false
  )
end

def commit_version_bump_fastlane
  commit_version_bump(
    message: 'Version Bump by fastlane',
    xcodeproj: ENV["JM_PROJECTPATH"],
    force: true
  )
  push_to_git_remote
end

##################################################################################################################
# Lanes
##################################################################################################################
platform :ios do
  before_all do
    ensure_git_status_clean
    increment_build_number(xcodeproj: ENV["JM_PROJECTPATH"])
    version = get_build_number(xcodeproj: ENV["JM_PROJECTPATH"])
    slack(
      message: "Commencement de la Build: #{version}",
      default_payloads: Array.new
    )
    unit_test
  end

  desc "Create new screenshots for the App Store in all languages and device types"
  desc "Additionally, this will add device frames around the screenshots and add the correct titles"
  lane :screenshots do
    snapshot
    frameit(white: true, path: './fastlane/screenshots')
  end

  desc "Alpha Lane"
  desc "Verification des Certificats"
  desc "Nettoyage des Derived Data"
  desc "Generation de l'ipa ad-hoc"
  desc "Deploiment Crashlytics"
  desc "Nettoyage des artefact de compilation"
  desc "Push sur git d'un version bump"
  lane :alpha do
    begin
      sigh
      clear_derived_data
      gym(
        scheme: ENV["JM_MAINSCHEME"], 
        workspace: ENV["JM_WORKSPACEPATH"], 
        export_method: "ad-hoc", 
        include_bitcode: true
      )
      crashlytics(
        crashlytics_path: ENV["JM_CRASHLYTICS_PATH"],
        api_token: '8f8919adb53c5ad650215fb52c8c73bec6124041',
        build_secret: 'b2deb874dd6c7056a55ccc56007a6cca4f2f4a258b0b2e98c76e18c2bdb913a2',
        ipa_path: "./TheGauntlet.ipa",
        groups: "devs"
      )
      clean_build_artifacts
      commit_version_bump_fastlane # doit etre fait en dernier
    rescue => ex
      puts ex
      reset_git_repo
    end
  end
  
  desc "Beta Lane"
  desc "Verification des Certificats"
  desc "Nettoyage des Derived Data"
  desc "Generation de l'ipa ad-hoc"
  desc "Deploiment Testflight"
  desc "Nettoyage des artefact de compilation"
  desc "Push sur git d'un version bump"
  lane :beta do
    begin
      sigh
      clear_derived_data
      gym(
        scheme: ENV["JM_MAINSCHEME"], 
        workspace: ENV["JM_WORKSPACEPATH"], 
        export_method: "ad-hoc", 
        include_bitcode: true
      )
      pilot
      clean_build_artifacts
      commit_version_bump_fastlane # doit etre fait en dernier
    rescue => ex
      puts ex
      reset_git_repo
    end
  end

  desc "Deploy a new version to the App Store"
  lane :deploy do
    verify_xcode
    snapshot
    sigh
    gym
    deliver(force: true)
  end

  after_all do |lane|
    slack(
      message: "Successfully deployed new App Update."
    )
  end

  error do |lane, exception|
    reset_git_repo
    slack(
      message: exception.message,
      success: false
    )
  end
end
